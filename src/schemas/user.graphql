# This is placeholder code

scalar Date

type Query {
    # Placeholder
    login(email: String!, password: String!): AuthenticateResponse!
    results: [Result!]!
    # Real things
    currentUser: User
    searchUsers(query: String): [PublicUser!]!
}

type Mutation {
    register(email: String!, password: String!): AuthenticateResponse!
}

type Subscription {
    newUpdate: Result
}


type AuthenticateResponse {
    token: String
}

type Result @entity {
    id: Int! @column
    result: String! @column
}

# End of placeholder code

type PublicUser {
    id: String
    username: String
    name: String
    surname: String
}


type User @entity {
    _id: String @id
    globalRole: GlobalRole @column
    username: String! @column
    name: String @column
    surname: String @column
    creationDate: Date @column
    userPreferences: UserPreferences @embedded
    oauthIds: OauthIds @embedded
    pushURLs: [String]! @column
}

type OauthIds @entity(embedded: true) {
    googleId: String @column
}

type UserPreferences @entity(embedded: true) {
    deleteAllPlans: Boolean
}


enum GlobalRole {
    ADMIN,
    USER
}